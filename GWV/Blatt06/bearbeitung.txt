1. (a) Ein Parser arbeitet mit Tripeln <S, I, A>. S ist dabei der Stack, I die Input-Liste und A die Verbindungen im Graphen. Folgende Operationen, können damit ausgeführt werden:
- Left-Arc: Nimmt oberstes element (n) aus Stack. Zusätzlich wird eine Verbindung hinzugefügt, die vom obersten Element des Inputs (n') zu diesem führt (n'->n, bzw. A U {(n',n)}
- Right-Arc: Nimmt oberstes Element aus dem Input (n') und legt dieses auf den Stack. Zusätzlich wird eine Verbindung hinzugefügt, die vom vorher obersten Element des Stacks (n) zu diesem Neuen führt (n -> n', bzw. A U {(n,n')})
- Reduce: Nimmt einfach oberstes Element vom Stack (Vorausgesetzt das Element hat ein Vater). Also <n|S,I,A> -> <S,I,A>.
- Shift: Es wird das oberste Element des Inputs genommen und auf den Stack gelegt. Also <S,n|I,A> -> <n|S,I,A>
(b) Der Parser terminiert, wenn die Input-Liste leer ist (<S,nil,A>), Der Inhalt von S uns A kann beliebig sein.
(c) Ein Abhängigkeitsgraph sollte folgende Eigenschaften haben_
- Single head: Der Graph hat einen Kopf, von dem aus sich der gesamte Baum aus entwickelt.
- Acyclic: Der Baum hat keine Kreise. SObald im Graph zwei weitere Punkte verbunden werden, würde ein Kreis entstehen.
- Connected: Alle Knoten im Graphen sind transitiv miteinander verbunden.
- Projective: Ein Graph ist prejektiv, wenn jeder Knoten "graph adjacent" zum Graphen-kopf ist. Zwei Knoten sind "graph-adjacent", wenn jeder Knoten zwischen diesen zweien, von einem der zweien dominiert wird.
(d)
TODO Bäume in latex malen 
- Single head: Baum basteln, in dem ein Knoten zwei Vaterknoten hat
- Acyclic: zwei Knoten mit Pfeile in beide Richtungen (Kreis)
- Connected: Einen Graphen malen, mit einem Punkt, der außerhalb liegt und kein Pfeil in oder aus ihn zeigt.
- Projective: (although it does exlude yles of length greater than 2). Ich denk mal, dass wir einen Graphen malen, mit einem großen kreis  n -> n' -> n'' -> n oder so?

2.
LA = Left-Arc, RA = Right-Arc, R = Reduce, S = Shift
<nil, Der Mann isst eine Giraffe, 0>	| S
<Der, Mann isst eine Giraffe, 0> 		| LA
<nil, Mann isst eine Giraffe, {(Mann,Der)} | S
<Mann, isst eine Giraffe, {(Mann,Der)} | LA
<nil, isst eine Giraffe, {(Mann,Der),(isst,Mann)} | S
<isst, eine Giraffe, {(Mann,Der),(isst,Mann)} | S
<eine isst, Giraffe, {(Mann,Der),(isst,Mann)} | LA
<isst, Giraffe, {(Mann,Der),(isst,Mann),(Giraffe,eine)} | RA
<Giraffe isst, nil, {(Mann,Der),(isst,Mann),(Giraffe,eine),(isst,Giraffe)} | Terminierung, da I = nil

3.
What are the search states?

Wie gehen davon aus, dass wir die Suche mit exakt den gleichen Mitteln wie den Parser betreiben. Also einer Liste bzw. Stack, einer Liste bzw. String von übrigen Worten und eine Tupelliste als Knotenrelation.
Also nach wie vor <S,I,A>.

What is the start state?

Genau wie beim Parser ist <nil,W,∅> der Startzustand.

What are the end states?

Enzustand ist <S,nil,A>, also genau wenn der gesamte String eingelesen wurde.

What are the state transitions?

Die Übergänge sind genau die 4 Möglichkeiten die der Parser hat. Left-Arc, Right-Arc, Reduce und Shift. Jeder Knoten in unseren Suchraum hat also 4 Kanten.

Can the search space be created before the parsing starts?

Da wir den String (W) kennen und auch alle 4 möglichen Übergänge kennen(auch wenn einige keinen Sinn machen, hier wäre dann das Thema cycle checking und multiple path Pruning noch zu klären), sollte es möglich sein den gesamten search space zu zeichnen bevor das Parsen begonnen hat.

What is the advantage of the proposed algorithm in contrast to simply trying to find a good dependency tree by enumerating all possible trees and selecting the best one from them?



For the search strategies discussed so far: are they a good fit for this search problem and why (not)?



How would you design a parser using the parser actions together with an ap- propriate search procedure?